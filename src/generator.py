import os
import random
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from utils import weights_init

class Gen_args(object):
    def __init__(self, 
                 vocab_size=3000, 
                 emb_dim=300, 
                 hidden_dim=[3,4,5]):
        self.vocab_size = vocab_size
        self.emb_dim = emb_dim
        self.hidden_dim = hidden_dim

class Generator(nn.Module):
    '''
    Generator
    '''
    def __init__(self, G_args, use_cuda=False):
        super(Generator, self).__init__()
        self.args = G_args
        self.use_cuda = use_cuda
        self.emb = nn.Embedding(self.args.vocab_size, self.args.emb_dim)
        self.lstm = nn.LSTM(self.args.emb_dim, self.args.hidden_dim, batch_first=True)
        self.fc = nn.Linear(self.args.hidden_dim, self.args.vocab_size)
        self.apply(weights_init)

    def forward(self, input):
        """
        Args:
            x: (batch_size, seq_len, 2), sequence of tokens generated by generator
        """
        x = input[:,:,0]
        mask = input[:,:,1].float()
        emb = self.emb(x) * mask.unsqueeze(2)
        h0, c0 = self.init_hidden(x.size(0))
        output, (h, c) = self.lstm(emb, (h0, c0))
        pred = F.softmax(self.fc(output.contiguous().view(-1, self.args.hidden_dim)), dim=1)
        return pred

    def step(self, input, h, c):
        """
        Args:
            x: (batch_size,  1, 2), sequence of tokens generated by generator
            h: (1, batch_size, hidden_dim), lstm hidden state
            c: (1, batch_size, hidden_dim), lstm cell state
        """
        x = input[:, 0, 0]
        mask = input[:, 0, 1].float()
        emb = self.emb(x) * mask.unsqueeze(2)
        output, (h, c) = self.lstm(emb, (h, c))
        pred = F.softmax(self.fc(output.view(-1, self.args.hidden_dim)), dim=1)
        return pred, h, c

    def init_hidden(self, batch_size):
        h = torch.zeros((1, batch_size, self.args.hidden_dim))
        c = torch.zeros((1, batch_size, self.args.hidden_dim))
        if self.use_cuda:
            h, c = h.cuda(), c.cuda()
        return h, c

    def sample(self, batch_size, x_gen, target):
        flag = False # whether sample from zero
        if x_gen is None:
            flag = True
        if self.use_cuda:
            if not flag:
                x_gen = x_gen.cuda()
            target = target.cuda()
        if flag:
            output = self.forward(target)
            samples = output.multinomial(1).view(batch_size, -1)
        else:
            given_len = x_gen.size(1)
            output = self.forward(target[:, given_len:,: ])
            samples = [x_gen, output.multinomial(1).view(batch_size, -1)]
            samples = torch.cat(samples, dim=1)
        return samples, output